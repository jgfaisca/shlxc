#!/bin/bash 
###############################################################################
#
# template script to generating aboriginal lxc container
# Copy this script to /usr/share/lxc/templates
#
# requirements:
# - add packages lxc-utils, rsync, wget 
# - linux kernel with relevant options enabled (see lxc-checkconfig)
# - remove package busybox 
# - a working internet connection
#
# supported architectures (build from source):
# armv4eb, armv4tl, armv4l, armv5l, armv6l, i486, i686, i586, i686-virtio, 
# x86_64, mips, mipsel, mips64, powerpc-440fp, powerpc, powerpc-virtio,  
# sh4, hw-wrt610n, hw-tct-hammer, m68k, sparc
#
# examples:
#
# to create a aboriginal armv6l container
# lxc-create -t aboriginal -n aboriginal-armv6l -- --arch armv6l --ipv4 10.0.3.100/24
#
# to start the container 
# lxc-start -n aboriginal-armv6l
#
# authors:
# Jose Faisca <jose.faisca@gmail.com>
#
###############################################################################

# Defaults only
MIRROR_BIN=${MIRROR_BIN:-http://landley.net/aboriginal/downloads/binaries/root-filesystem}
MIRROR_SRC=${MIRROR_SRC:-http://landley.net/hg/aboriginal/archive}
BUILD_SCRIPT=${BUILD_SCRIPT:-tip.tar.bz2} 
CACHE_DIR=${CACHE_DIR:-/var/cache/lxc}
DEFAULT_CACHE=${DEFAULT_CACHE:-$CACHE_DIR/aboriginal-linux}
HOOK_DIR=${HOOK_DIR:-/usr/share/lxc/hooks}
SYSIMAGE_TYPE=${SYSIMAGE_TYPE:-ext2} 
SYSIMAGE_HDA_MEGS=${SYSIMAGE_HDA_MEGS:-2048}
ADDIMAGE_HDB_MEGS=${ADDIMAGE_HDB_MEGS:-2048}
MEMORY_LIMIT=${MEMORY_LIMIT:-256M}
DEFAULT_LXC=${DEFAULT_LXC:-/etc/default/lxc}

set -e

if [ -r "${DEFAULT_LXC}" ]; then
    . "${DEFAULT_LXC}"
fi

copy_files()
{
    src=$1
    dest=$2   

    # copy
    echo "Copying from $src to $dest"
    rsync -Ha $src $dest || return 1
    echo "Copy complete."
    return 0    
}

install_OS_from_source()
{
    rootfs=$1
    arch=$2	
    path=$3
    flushcache=$4
    
    mkdir -p /var/lock/subsys/

    (
        flock -x 200
        if [ $? -ne 0 ]; then
            echo "Cache repository is busy."
            return 1
        fi

        if [ $flushcache -eq 1 ]; then
            echo "Flushing cache..."
            rm -rf ${DEFAULT_CACHE}
        fi

        # download build script
    	if [ ! -d "${DEFAULT_CACHE}" ]; then
	    echo "Downloading aboriginal build script"
    	  wget -nH --directory-prefix=${CACHE_DIR} ${MIRROR_SRC}/${BUILD_SCRIPT}
          if [ $? -ne 0 ]; then
             echo "ERROR: failed to download ${BUILD_SCRIPT}" 1>&2
             return 1
          fi
        fi

        # uncompress build script
	   if [ ! -d "${DEFAULT_CACHE}" ] && [ -f ${CACHE_DIR}/${BUILD_SCRIPT} ] ; then
          version=$(tar -jtf ${CACHE_DIR}/${BUILD_SCRIPT} | head -n1 | cut -d'/' -f1)
	      echo "uncompress ${BUILD_SCRIPT}" 
    	  if ! tar jxf ${CACHE_DIR}/${BUILD_SCRIPT} --directory ${CACHE_DIR}; then
	        echo "ERROR: failed to uncompress ${BUILD_SCRIPT}" 1>&2
    	    exit 1	
    	  fi
	      echo "remove ${BUILD_SCRIPT}" 
    	  if ! rm -f "${CACHE_DIR}/${BUILD_SCRIPT}"; then
	         echo "ERROR: failed to remove ${BUILD_SCRIPT}" 1>&2
    	     exit 1	
    	  fi	

          # change cache directory name to default
          mv ${CACHE_DIR}/$version ${DEFAULT_CACHE}
          echo $version >> ${DEFAULT_CACHE}/aboriginal-version    
	   fi 

       # build 
       if [ ! -d "${DEFAULT_CACHE}/build" ] || [ $(ls ${DEFAULT_CACHE}/build/system-image-$arch | grep "hda.${SYSIMAGE_TYPE}" | wc -l) -eq 0 ]; then
          echo "build aboriginal $arch from source"
          rm -rf ${DEFAULT_CACHE}/build/*$arch*
          cd ${DEFAULT_CACHE}
          SYSIMAGE_TYPE=${SYSIMAGE_TYPE} SYSIMAGE_HDA_MEGS=${SYSIMAGE_HDA_MEGS} ${DEFAULT_CACHE}/build.sh $arch 
       fi

       # crete rootfs directory
       mkdir -p $rootfs

       # copy aboriginal OS
       copy_files "${DEFAULT_CACHE}/build/system-image-$arch/" "$path/system-image-$arch" 

       # copy host 
       copy_files "${DEFAULT_CACHE}/build/host" "$path" 

       # copy native compiler
       copy_files "${DEFAULT_CACHE}/build/native-compiler-$arch" "$path" 

       # copy simple cross-compiler
       copy_files "${DEFAULT_CACHE}/build/simple-cross-compiler-$arch" "$path" 

       return 0

    ) 200>/var/lock/subsys/lxc-aboriginal

    return $?
}


system_configuration()
{
    path=$1
    rootfs=$2
    name=$3
    arch=$4

# create lxc config
grep -q "^lxc.rootfs" $path/config 2>/dev/null || echo "lxc.rootfs = $rootfs" >> $path/config

    cat <<EOF >> $path/config
lxc.network.name = eth0
lxc.network.ipv4 = $ipv4
lxc.network.ipv4.gateway = auto
lxc.utsname = $name
lxc.tty = 1
lxc.pts = 1024
lxc.arch = $arch
lxc.cap.drop = sys_module mac_admin mac_override sys_time
lxc.console = none
lxc.cgroup.devices.deny = a
# Allow any mknod (but not using the node)
lxc.cgroup.devices.allow = c *:* m
lxc.cgroup.devices.allow = b *:* m
# /dev/null and zero
lxc.cgroup.devices.allow = c 1:3 rwm
lxc.cgroup.devices.allow = c 1:5 rwm
# consoles
lxc.cgroup.devices.allow = c 5:1 rwm
lxc.cgroup.devices.allow = c 5:0 rwm
lxc.cgroup.devices.allow = c 4:0 rwm
lxc.cgroup.devices.allow = c 4:1 rwm
# /dev/{,u}random
lxc.cgroup.devices.allow = c 1:9 rwm
lxc.cgroup.devices.allow = c 1:8 rwm
lxc.cgroup.devices.allow = c 136:* rwm
lxc.cgroup.devices.allow = c 5:2 rwm
# rtc
lxc.cgroup.devices.allow = c 254:0 rwm
# fuse
lxc.cgroup.devices.allow = c 10:229 rwm
# tun
lxc.cgroup.devices.allow = c 10:200 rwm
# full
lxc.cgroup.devices.allow = c 1:7 rwm
# hpet
lxc.cgroup.devices.allow = c 10:228 rwm
# kvm
lxc.cgroup.devices.allow = c 10:232 rwm
# memory limit
lxc.cgroup.memory.limit_in_bytes = ${MEMORY_LIMIT}
# mount
lxc.mount.entry = proc proc proc nosuid,nodev,noexec  0 0
lxc.mount.entry = sys sys sysfs nosuid,nodev,noexec,ro 0 0
lxc.mount.entry = dev/pts dev/pts devpts nosuid,noexec,mode=0620,ptmxmode=000,newinstance 0 0
lxc.mount.entry = tmp tmp tmpfs nosuid,nodev,noexec,mode=1777,size=1g 0 0
lxc.mount = $path/fstab
# hooks
lxc.hook.pre-start = $path/aboriginal-hooks
lxc.hook.post-stop = $path/aboriginal-hooks
EOF

if [ $? -ne 0 ]; then
    echo "Failed to add config"
    return 1
fi

# create fstab
    cat <<EOF > $path/fstab
$path/hdb $path/rootfs/home none bind 0 0
$path/hdc $path/rootfs/mnt none bind 0 0
EOF

if [ $? -ne 0 ]; then
    echo "Failed to add fstab"
    return 1
fi

return 0
}

get_qemu_architecture()
{
arch=$1    
local qemu=""

case "$arch" in
    armv4tl)        qemu="arm" ;;
    armv4l)         qemu="arm" ;;
    armv4eb)        qemu="armeb" ;;
    armv5l)         qemu="arm" ;;
    armv6l)         qemu="arm" ;;
    hw-tct-hammer)  qemu="arm" ;;
    hw-wrt610n)     qemu="mips" ;;
    i486)           qemu="i386" ;;
    i586)           qemu="i386" ;;
    i686)           qemu="i386" ;;
    i686-virtio)    qemu="i386" ;;
    x86_64)         qemu="x86_64" ;;
    mips)           qemu="mips" ;;
    mipsel)         qemu="mipsel" ;;
    mips64)         qemu="mips64" ;;
    powerpc)        qemu="ppc" ;;
    powerpc-440fp)  qemu="ppc" ;;
    powerpc-virtio) qemu="ppc" ;;
    sh4)            qemu="sh4" ;;
    m68k)           qemu="m68k" ;;
    sparc)          qemu="sparc" ;;
    *)              break ;;
esac
echo "$qemu"
}


modify_hooks()
{
arch=$1
qemu=$2
path=$3 

  cat <<EOF >> "$path/aboriginal-hooks"

# variables  
SCRIPT_NAME=\${0##*/}
SCRIPT_PATH=\${0}
LXC_DIR=\$(dirname "\${LXC_ROOTFS_PATH}")
LXC_INITSCRIPT="\${LXC_ROOTFS_PATH}/sbin/init"
ARCH="$arch"
QEMU_ARCH="$qemu" # enable QEMU
GTW="${LXC_ADDR}"
ARGS="\$*"
#INSTALL_DIR="${DEFAULT_CACHE}/build"
INSTALL_DIR="\${LXC_DIR}"
HDA="\${LXC_DIR}/system-image-\$ARCH/hda.ext2"
HDB="\${LXC_DIR}/system-image-\$ARCH/hdb.img" # enable HDB
#HDC="\${LXC_DIR}/system-image-\$ARCH/default.hdc" # enable HDC
HDBMEGS=\${ADDIMAGE_HDB_MEGS} # enable HDB
DISTCC="distccd" # enable distcc
DEFAULT_TMPDIR="/tmp/tmp_\${LXC_NAME}"
DISTCC_TMPDIR="\${DEFAULT_TMPDIR}"_"\${DISTCC}"
DISTCC_PID="\${DISTCC_TMPDIR}"/"\$DISTCC.pid"
DISTCC_LOG="\${DISTCC_TMPDIR}"/"\$DISTCC.log"
DISTCC_USER="nobody"
DISTCC_LISTEN=\$GTW
DISTCC_ALLOW="${LXC_NETWORK}"
# distcc daemon log level: critical, error, warning, notice, info, or debug.
DISTCC_LOGLEVEL="info"
FTP="ftpd" # enable ftpd
FTP_HOST="" # ftp daemon server
FTP_PORT="" # ftp daemon port
FTP_UPLOAD="${LXC_DIR}/upload"
FTP_TMPDIR="\${DEFAULT_TMPDIR}"_"\${FTP}"
FTP_PID="\${FTP_TMPDIR}"/"\$FTP.pid"
FTP_LOG="\${FTP_TMPDIR}"/"\$FTP.log"
FTP_USER="nobody"
#MONIT="monit" # enable monit
#MONIT_CONF="/etc/monit/monitrc" # on debian/ubuntu
#MONIT_CONF="/etc/monit.conf" # on redhat/fedora/centos

trap clean_up SIGHUP SIGQUIT SIGINT SIGTERM

# create mount directories
mkdir -p \${LXC_DIR}/hdb
mkdir -p \${LXC_DIR}/hdc

ACTION="\$3"
OUTPUT_FILE="\${LXC_DIR}/\$ACTION.log"
case "\$ACTION" in
    (pre-start) # lxc.hook.pre-start
        #
        # write output
        write_out 
        # mount hda
        if [ -n "\$HDA" ]; then
          loop_hda=\$(mount_loop "rootfs" "\$HDA") || exit 1
          echo "\$loop_hda mounted" >> "\${OUTPUT_FILE}"
        fi
        # setup QEMU
        [ -n "\$QEMU_ARCH" ] && setup_qemu "\$QEMU_ARCH" || exit 1
        # mount hdb
        if [ -n "\$HDB" ]; then
          setup_hdb \$HDBMEGS
          loop_hdb=\$(mount_loop "hdb" "\$HDB") &&
          echo "\$loop_hdb mounted" >> "\${OUTPUT_FILE}"
        fi
        # mount hdc
        if [ -n "\$HDC" ]; then
          loop_hdc=\$(mount_loop "hdc" "\$HDC") &&
          echo "\$loop_hdc mounted" >> "\${OUTPUT_FILE}"
        fi
        # copy resolv.conf
        cp_resolv
        # populate /dev
        p_dev
        # setup ftpd
        [ -n "\$FTP" ] && setup_ftp "\$GTW" &&
        # setup distcc
        [ -n "\$DISTCC" ] && setup_distcc "\$GTW" "\$ARCH"
        # setup monit
        [ -n "\$MONIT" ] && setup_monit "\${DISTCC}" "\${DISTCC_PID}"
        exit 0
        ;;
    (pre-mount) # lxc.hook.pre-mount
        #
        ;;
    (mount) # lxc.hook.mount
        #
        ;;
    (autodev) # lxc.hook.autodev
        #
        ;;
    (start) # lxc.hook.start
        #
        ;;
    (post-stop) # lxc.hook.post-stop
	    #
        # write output
        write_out "\${OUTPUT_FILE}"
        # script exit housekeeping
        clean_up
        exit 0
        ;;
    (clone) # lxc.hook.clone
        #
        ;;
    (*) # invalid action
        echo "ERROR: invalid action: \$ACTION" >> "\${OUTPUT_FILE}"
        exit 1
        ;;
esac

exit 0
EOF

return 0

}

usage()
{
    cat <<EOF
usage:
    $1 -n|--name=<container_name>
         -a|--arch=<architecture of the container>
         -4|--ipv4=<ipv4 address> 
        [-p|--path=<path>] 
        [-c|--clean] 
        [-6|--ipv6=<ipv6 address>]
        [-g|--gw=<ipv4 gateway address>] 
        [-G|--gw6=<ipv6 gateway address>] 
        [-d|--dns=<dns address>]
        [-e|--debug] 
        [-h|--help]

Mandatory args:
  -n,--name         container name
  -4,--ipv4         specify the ipv4 address, eg. 10.0.3.100/24
  -a,--arch         define the container architecture 
                    (armv4eb, armv4tl, armv4l, armv5l, armv6l, i486, i686, i586, i686-virtio, 
                    x86_64, mips, mipsel, mips64, powerpc-440fp, powerpc, powerpc-virtio,  
                    sh4, hw-wrt610n, hw-tct-hammer, m68k, sparc)
Optional args:
  -p,--path         path to where the container rootfs will be created, defaults to /var/lib/lxc. 
  --rootfs          rootfs path
  -c,--clean        clean the cache
  -6,--ipv6         NOT USED YET, specify the ipv6 address, eg. 2003:db8:1:0:214:1234:fe0b:3596/64
  -g,--gw           NOT USED YET, specify the default ipv4 gw, eg. 10.0.3.1
  -G,--gw6          NOT USED YET, specify the default ipv6 gw, eg. 2003:db8:1:0:214:1234:fe0b:3596
  -d,--dns          NOT USED YET, specify the DNS server, eg. 10.0.3.2
  -e,--debug        enable debug
  -h,--help         print this help
EOF
    return 0
}

options=$(getopt -o hp:n:ca:4:g:6:G:d:e \
-l help,path:,rootfs:,name:,clean,arch:,ipv4:,gw:,ipv6:,gw6:,dns:,debug -- "$@")

if [ $? -ne 0 ]; then
    usage $(basename $0)
    exit 1
fi
eval set -- "$options"


debug=0
flushcache=0
while true
do
    case "$1" in
    -h|--help)      usage $0 && exit 0;;
    -p|--path)      path=$2; shift 2;;
    --rootfs)       rootfs=$2; shift 2;;
    -n|--name)      name=$2; shift 2;;
    -c|--clean)     flushcache=1; shift 1;;
    -a|--arch)      arch=$2; shift 2;;
    -4|--ipv4)      ipv4=$2; shift 2;;
    -g|--gw)        gateway4=$2; shift 2;;
    -6|--ipv6)      ipv6=$2; shift 2;;
    -G|--gw6)       gateway6=$2; shift 2;;
    -d|--dns)       dns=$2; shift 2;;
    -e|--debug)     debug=1; shift 1;;
    --)             shift 1; break ;;
     *)             break ;;
    esac
done

if [ $debug -eq 1 ]; then
    set -x
fi

if [ -z "$path" ]; then
    echo "missing path, use --path option"
    exit 1
fi

if [ -z "$arch" ]; then
    echo "missing architecture, use --arch option"
    exit 1
fi

if [ -z "$ipv4" ]; then
    echo "missing ipv4 address, use --ipv4 option"
    exit 1
fi

if [ -z "$ipv4" -a -z "$ipv6" ]; then
    BOOTPROTO="dhcp"
else
    BOOTPROTO="static"
fi

if [ "$(id -u)" != "0" ]; then
    echo "This script should be run as 'root'"
    exit 1
fi

# detect rootfs
config="$path/config"
# if $rootfs exists here, it was passed in with --rootfs
if [ -z "$rootfs" ]; then
    if grep -q '^lxc.rootfs' $config 2>/dev/null ; then
        rootfs=`grep 'lxc.rootfs =' $config | awk -F= '{ print $2 }'`
    else
        rootfs=$path/rootfs
    fi
fi

# install aboriginal from source
install_OS_from_source $rootfs $arch $path $flushcache
if [ $? -ne 0 ]; then
    echo "failed to install aboriginal"
    exit 1
fi

# system configuration
system_configuration $path $rootfs $name $arch 
if [ $? -ne 0 ]; then
    echo "failed write configuration file"
    exit 1
fi

# copy hooks
if [ -f ${HOOK_DIR}/aboriginal-hooks ]; then
    $(cp ${HOOK_DIR}/aboriginal-hooks $path/)
    $(chmod 755 $path/aboriginal-hooks)
else
    echo "cannot find file ${HOOK_DIR}/aboriginal-hooks"
    exit 1 
fi

# get qemu architecture
qemu=$(get_qemu_architecture $arch)

# modify hooks
modify_hooks $arch $qemu $path

echo ""
echo "container $name created!"
echo "network configured as $BOOTPROTO ipv4 $ipv4"
echo ""

exit 0
